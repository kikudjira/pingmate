name: YouTrack Issue Linker

on:
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_target:
    types: [opened, edited]

env:
  YOUTRACK_URL: "https://youtrack.cloud"
  PROJECT_PREFIXES: "FUN,DDD,FFB,DOC"
  COMMENT_MARKER: "<!-- youtrack-linker -->"

jobs:
  link-youtrack-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Link YouTrack Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 3
          script: |
            const YOUTRACK_URL = process.env.YOUTRACK_URL;
            const PROJECT_PREFIXES = process.env.PROJECT_PREFIXES.split(',').map(p => p.trim());
            const COMMENT_MARKER = process.env.COMMENT_MARKER;

            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;

            core.info(`Processing PR #${pr.number}: "${pr.title}"`);

            /**
             * Extract YouTrack issue IDs from text
             */
            function extractIssueIds(text) {
              if (!text) return [];

              const prefixPattern = PROJECT_PREFIXES.join('|');
              const regex = new RegExp(`(${prefixPattern})-\\d+`, 'gi');
              const matches = text.match(regex) || [];

              // Remove duplicates and normalize case
              return [...new Set(matches.map(id => id.toUpperCase()))];
            }

            /**
             * Create YouTrack link comment body
             */
            function createCommentBody(issueIds) {
              if (issueIds.length === 0) return null;

              const links = issueIds.map(id =>
                `[${id}](${YOUTRACK_URL}/issue/${id})`
              ).join(', ');

              const plural = issueIds.length > 1;
              const header = plural ? 'üîó **YouTrack Issues:**' : 'üîó **YouTrack Issue:**';

              return `${COMMENT_MARKER}\n${header} ${links}`;
            }

            /**
             * Find existing bot comment
             */
            async function findBotComment() {
              try {
                const { data: comments } = await github.rest.issues.listComments({
                  owner,
                  repo,
                  issue_number: pr.number,
                  per_page: 100
                });

                return comments.find(comment =>
                  comment.user.login === 'github-actions[bot]' &&
                  comment.body.includes(COMMENT_MARKER)
                );
              } catch (error) {
                core.warning(`Failed to fetch comments: ${error.message}`);
                return null;
              }
            }

            /**
             * Validate YouTrack issue exists (optional enhancement)
             */
            function validateIssueIds(issueIds) {
              const validPrefixes = PROJECT_PREFIXES;
              return issueIds.filter(id => {
                const prefix = id.split('-')[0];
                if (!validPrefixes.includes(prefix)) {
                  core.warning(`Issue ${id} has invalid prefix. Valid prefixes: ${validPrefixes.join(', ')}`);
                  return false;
                }
                return true;
              });
            }

            try {
              // Extract issue IDs from PR title and body
              const titleIssues = extractIssueIds(pr.title);
              const bodyIssues = extractIssueIds(pr.body);
              const allIssues = [...new Set([...titleIssues, ...bodyIssues])];

              core.info(`Found ${allIssues.length} issue(s): ${allIssues.join(', ')}`);

              // Validate issue IDs
              const validIssues = validateIssueIds(allIssues);
              if (validIssues.length !== allIssues.length) {
                core.warning(`${allIssues.length - validIssues.length} invalid issue(s) filtered out`);
              }

              // Find existing comment
              const existingComment = await findBotComment();
              const newCommentBody = createCommentBody(validIssues);

              if (validIssues.length > 0) {
                // We have valid issues to link
                if (existingComment) {
                  // Update existing comment if different
                  if (existingComment.body !== newCommentBody) {
                    await github.rest.issues.updateComment({
                      owner,
                      repo,
                      comment_id: existingComment.id,
                      body: newCommentBody,
                    });
                    core.info(`‚úÖ Updated comment with ${validIssues.length} issue link(s)`);
                  } else {
                    core.info('‚ÑπÔ∏è Comment already up-to-date');
                  }
                } else {
                  // Create new comment
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: pr.number,
                    body: newCommentBody,
                  });
                  core.info(`‚úÖ Created comment with ${validIssues.length} issue link(s)`);
                }
              } else {
                // No valid issues found
                if (existingComment) {
                  // Remove outdated comment
                  await github.rest.issues.deleteComment({
                    owner,
                    repo,
                    comment_id: existingComment.id,
                  });
                  core.info('üóëÔ∏è Removed outdated YouTrack link comment');
                } else {
                  core.info('‚ÑπÔ∏è No YouTrack issues found and no comment to manage');
                }
              }

              // Set outputs for potential use in other jobs
              core.setOutput('issue-count', validIssues.length);
              core.setOutput('issues', validIssues.join(','));

            } catch (error) {
              core.setFailed(`Workflow failed: ${error.message}`);
              core.error(`Stack trace: ${error.stack}`);

              // Attempt to post error comment for debugging
              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pr.number,
                  body: `${COMMENT_MARKER}\n‚ö†Ô∏è **Error linking YouTrack issues:** ${error.message}\n\nPlease check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
                });
              } catch (commentError) {
                core.warning(`Failed to post error comment: ${commentError.message}`);
              }
            }
